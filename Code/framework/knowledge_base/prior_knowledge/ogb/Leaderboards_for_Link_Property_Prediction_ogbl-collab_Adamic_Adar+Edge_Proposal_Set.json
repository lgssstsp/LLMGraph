{
    "Task Description": "Leaderboards for Link Property Prediction",
    "Dataset Name": "ogbl-collab",
    "Dataset Link": "../linkprop/#ogbl-collab",
    "Rank": 12,
    "Method": "Adamic Adar+Edge Proposal Set",
    "External Data": "No",
    "Test Accuracy": "0.6548 ± 0.0000",
    "Validation Accuracy": "0.9735 ± 0.0000",
    "Contact": "mailto:qh53@cornell.edu",
    "Paper Link": "https://arxiv.org/pdf/2106.15810.pdf",
    "Code Link": "https://github.com/CUAI/Edge-Proposal-Sets",
    "Parameters": "0",
    "Hardware": "GeForce RTX 2080 Ti (11GB GPU)",
    "Date": "Jul 13, 2021",
    "Local Paper PDF Path": "knowledge_base/Leaderboards_for_Link_Property_Prediction/ogbl-collab/Adamic_Adar+Edge_Proposal_Set.pdf",
    "Paper Summary": "The paper introduces a method for link prediction in graphs by using additional edge sets called \"proposal sets\" as a pre-processing step. The main focus is on how to construct these proposal sets effectively to enhance the performance of various link prediction algorithms, including both neighborhood heuristics and Graph Neural Networks (GNNs).\n\n### Proposal Set Construction\n1. **Definition**: A proposal set \\( P \\) is a collection of edges added to the original graph \\( G = (V, E) \\), aiming to improve the performance of link prediction algorithms by guiding them toward predicting the right edges.\n\n2. **Types of Proposal Sets**:\n   - **Human-Expert/Heuristic-Guided**: A proposal set can be defined based on human expertise or generated by simple heuristics (e.g., common neighbors).\n   - **Model-Driven**: The proposal set can also come from another trained model that predicts potential edges, effectively allowing the link prediction task to leverage another layer of predictions to enhance accuracy.\n\n3. **Filter & Rank Framework**:\n   - The proposed method involves starting with a broad set \\( S \\), which contains candidates for the proposal set (e.g., all node pairs with at least one common neighbor). \n   - **Filter Step**: From this starting set, the top \\( k \\) edges are selected based on scores from a preliminary link prediction algorithm, creating the proposal set \\( P \\).\n   - **Rank Step**: This proposal set is then combined with the original graph to perform the final prediction using the chosen link prediction model. This two-step process allows for an effective way to focus on high-potential edges while reducing computational demands.\n\n### Algorithm Design Aspects\n1. **Scoring Functions**: The paper discusses various scoring functions to determine potential edges for inclusion in the proposal set, including:\n   - Common Neighbors: Assessing the number of shared neighbors between nodes.\n   - Adamic–Adar Index: Using neighborhood sizes to predict potential links.\n   - Cosine Similarity Common Neighbors: Incorporating feature similarity to weight common neighbors.\n\n2. **Dynamic Set Adjustments**: The target size of the proposal set can be dynamically adjusted based on empirical performance on validation edges, allowing the model to optimize the proposal set's impact on prediction accuracy.\n\n3. **Robustness to Noisy Edges**: The methods developed are shown to be resilient to including negative edges or noisy predictions in the proposal sets, enhancing the overall robustness of the link prediction model. This suggests that effective proposal sets can enhance positive edge recognition without adversely affecting performance from negative edges.\n\n4. **Modular Design**: The overall design emphasizes a modular approach where independent models can be combined in a pipeline format, enabling flexibility in adjusting the filtering and ranking mechanisms based on specific application requirements.\n\nIn summary, the paper focuses on an innovative pre-processing approach to link prediction through carefully engineered proposal sets, highlighting the integration of filtering and ranking strategies to enhance model performance across various contexts. This modular and adaptable design ensures that different algorithms can benefit from the generated structures, regardless of their underlying architecture."
}