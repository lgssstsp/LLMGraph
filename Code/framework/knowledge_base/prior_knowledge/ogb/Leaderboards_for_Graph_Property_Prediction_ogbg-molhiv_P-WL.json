{
    "Task Description": "Leaderboards for Graph Property Prediction",
    "Dataset Name": "ogbg-molhiv",
    "Dataset Link": "../graphprop/#ogbg-mol",
    "Rank": 14,
    "Method": "P-WL",
    "External Data": "No",
    "Test Accuracy": "0.8039 ± 0.0040",
    "Validation Accuracy": "0.8279 ± 0.0059",
    "Contact": "mailto:dmendo@stanford.edu",
    "Paper Link": "http://proceedings.mlr.press/v97/rieck19a/rieck19a.pdf",
    "Code Link": "https://github.com/dmmendo/OGBMolhiv_PWL",
    "Parameters": "4,600,000",
    "Hardware": "CPU",
    "Date": "Mar 29, 2021",
    "Local Paper PDF Path": "knowledge_base/Leaderboards_for_Graph_Property_Prediction/ogbg-molhiv/P-WL.pdf",
    "Paper Summary": "The paper \"A Persistent Weisfeiler–Lehman Procedure for Graph Classification\" introduces a novel method for graph classification that builds upon the well-known Weisfeiler–Lehman (WL) graph kernel by integrating topological features derived from persistent homology. Below are the key details concerning the methods and model design aspects:\n\n### Method Overview\n1. **Weisfeiler–Lehman Stabilization**: The procedure initiates with the conventional WL stabilization algorithm, iteratively assigning labels to vertices based on their neighborhoods until stable labels are achieved.\n\n2. **Multiset Labeling**: Each vertex in the graph is assigned a multiset label during each iteration of the WL procedure. This multiset captures the labels of the vertex's neighbors, allowing the incorporation of structural information.\n\n3. **Distance Metric**: A distance metric is defined between the multiset labels of adjacent vertices to compute edge weights, facilitating the construction of a weighted graph. This metric is aimed at smoothing the representation of vertex characteristics and improving the quality of graph filtration.\n\n4. **Weighted Graph Filtration**: The edge weights obtained from the distance metric are sorted to create a filtration of the graph. This filtration is essential for computing topological features, specifically persistent homology.\n\n5. **Persistent Homology Calculation**: The filtration allows for the calculation of persistent homology, which tracks changes in topological features (connected components and cycles) across multiple scales. This results in persistence tuples that provide rich topological descriptors.\n\n6. **Feature Vector Construction**: The feature vectors, denoted as \\(ϕ(h)\\), are created from the persistent topological features. The authors propose two key components:\n   - **Persistent Subtree Features**: These include weighted counts of vertex labels, considering their persistence values, effectively augmenting the original subtree features with insightful topological information.\n   - **Persistent Cycle Features**: These are additional features capturing cycles in the graphs that are traditionally difficult to compute but are important for classification.\n\n7. **Generalization of WL Features**: The method provides a generalized framework (P-WL) that encompasses the original WL subtree features but also incorporates the new cycle features through separate calculations.\n\n8. **Algorithm Steps** (summarized):\n   - **Iteration through WL stabilization**: Generate multiset labels for each vertex.\n   - **Weight assignment**: Assign weights to each edge using the multiset distance.\n   - **Label compression**: Compress and reassign vertex labels based on the newly calculated weights.\n   - **Feature extraction**: Calculate persistent homology and construct feature vectors that integrate both subtree and cycle information.\n\n### Conclusion\nThe proposed persistent Weisfeiler–Lehman procedure effectively enhances the traditional graph classification approach by leveraging topological features, particularly through the integration of persistent homology. This enables the model to capture not just vertex neighborhoods but also expansive structural details, such as cycles and connected components, leading to richer and more informative representations for classification tasks."
}