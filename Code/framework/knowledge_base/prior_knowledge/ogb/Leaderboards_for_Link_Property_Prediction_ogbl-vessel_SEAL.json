{
    "Task Description": "Leaderboards for Link Property Prediction",
    "Dataset Name": "ogbl-vessel",
    "Dataset Link": "../linkprop/#ogbl-vessel",
    "Rank": 10,
    "Method": "SEAL",
    "External Data": "No",
    "Test Accuracy": "0.8050 ± 0.0021",
    "Validation Accuracy": "0.8053 ± 0.0022",
    "Contact": "mailto:julian.mcginnis@tum.de",
    "Paper Link": "https://arxiv.org/abs/1802.09691",
    "Code Link": "https://github.com/facebookresearch/SEAL_OGB",
    "Parameters": "172,610",
    "Hardware": "Quadro RTX 8000 Ti (48GB GPU)",
    "Date": "Aug 24, 2022",
    "Local Paper PDF Path": "knowledge_base/Leaderboards_for_Link_Property_Prediction/ogbl-vessel/SEAL.pdf",
    "Paper Summary": "The paper titled \"Link Prediction Based on Graph Neural Networks\" discusses a novel framework for link prediction called SEAL (Subgraphs, Embeddings, and Attributes for Link prediction), which utilizes graph neural networks (GNNs) to learn heuristics from local enclosing subgraphs instead of relying on predefined heuristics.\n\n**Key Aspects of the Model Design:**\n\n1. **Enclosing Subgraph Extraction:**\n   - For each target link (a pair of nodes), SEAL extracts a local enclosing subgraph that includes all nodes within a certain hop distance. This allows for localized learning of features directly relevant to link existence.\n   - The enclosing subgraph encapsulates the \"h-hop surrounding environment\" of the target node pair, containing rich information that is pertinent for predicting whether a link will form.\n\n2. **Node Information Matrix Construction:**\n   - The model constructs a node information matrix \\( X \\) for each enclosing subgraph that aggregates various types of node features. This matrix consists of three types of features:\n     - **Structural Node Labels:** Nodes are assigned integer labels based on their roles and relative positions within the enclosing subgraph. For example, target nodes receive distinct labels, while other nodes are labeled based on their distance to the targets (termed Double-Radius Node Labeling).\n     - **Node Embeddings:** These embeddings can be generated from various embedding techniques, allowing the model to leverage latent feature representations.\n     - **Node Attributes:** Any additional explicit features relevant to the nodes can also be incorporated to provide further context.\n\n3. **Graph Neural Network Learning:**\n   - SEAL employs a GNN to learn from the extracted local structures. The GNN typically comprises graph convolutional layers that capture local subgraph features.\n   - Implementation is done using a propagation-based graph convolutional architecture, allowing the model to learn multi-hop node representations by stacking several convolution layers.\n   - The output from these layers is then processed through a graph-level aggregation, which combines the learned node-level features to produce a final representation indicative of the likelihood of link formation.\n\n4. **Handling Node Features:**\n   - SEAL is designed to not only learn graph structure features from the enclosing subgraphs but also to incorporate latent features (from node embeddings) and explicit features (from node attributes). This multifaceted approach allows SEAL to leverage both local structural information and additional context provided by the node features in a unified framework.\n\n5. **Replacing Fully-Connected Networks:**\n   - SEAL addresses limitations of previous methods (e.g., the Weisfeiler-Lehman Neural Machine) that utilized fully-connected networks, which often required truncating varying-sized subgraphs to a fixed size. Instead, SEAL uses graph neural networks, which can naturally accommodate different sizes of input through message-passing operations.\n\nOverall, the design of SEAL focuses on efficiently learning link prediction heuristics from localized subgraphs with flexibility in incorporating diverse feature types using graph neural networks. This architecture enhances the model’s ability to generalize across different network structures without being restricted by predefined heuristics."
}